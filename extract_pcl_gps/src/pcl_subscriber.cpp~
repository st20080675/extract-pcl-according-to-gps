#include <ros/ros.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <boost/foreach.hpp>
#include <pcl_conversions/pcl_conversions.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/Image.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <string>
#include <stdio.h>
#include <fstream>
#include <sstream>


typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;
int frame_counter = 0;
std::string save_path = "/home/sunting/Documents/program/3d_data/hkust_hanghao/2/bin_data/";

void callback(const PointCloud::ConstPtr& msg)
{
  printf ("Cloud: width = %d, height = %d\n", msg->width, msg->height);
  //BOOST_FOREACH (const pcl::PointXYZ& pt, msg->points)
    //printf ("\t(%f, %f, %f)\n", pt.x, pt.y, pt.z);

  // save file to binary
  std::string cur_frame_save_path = save_path + std::to_string(frame_counter/100000) + std::to_string((frame_counter%100000)/10000) + std::to_string((frame_counter%10000)/1000) + std::to_string((frame_counter%1000)/100) + std::to_string((frame_counter%100)/10) + std::to_string(frame_counter%10); 

  float * temp_data; 
  temp_data = new float[msg->size() * 4];
  int j = 0; 

  BOOST_FOREACH (const pcl::PointXYZ& pt, msg->points)
  {
      temp_data[j++] = pt.x;
      temp_data[j++] = pt.y;
      temp_data[j++] = pt.z;
      temp_data[j++] = pt.data[3];
  }

  FILE *file = fopen(cur_frame_save_path.c_str(), "wb");
  fwrite(temp_data,sizeof(float),msg->size() * 4,file);
  fclose(file);
    
/*
  sensor_msgs::Image msg_image;
  cv::Mat image;
  pcl::toROSMsg(cloud, msg_image);
*/
   frame_counter++;
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "sub_pcl");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe<PointCloud>("/velodyne_points", 1, callback);
  ros::spin();
}
